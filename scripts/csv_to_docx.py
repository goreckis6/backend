import pandas as pd
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_ALIGN_VERTICAL
from docx.oxml.ns import qn
from docx.shared import Pt, RGBColor
import argparse
import os
import sys
from datetime import datetime

def csv_to_docx(csv_file_path, docx_file_path, title="CSV Data Document", author="Generated by Morphy", include_date=True):
    try:
        # Read CSV preserving ALL data including duplicates
        df = pd.read_csv(
            csv_file_path,
            dtype=str,  # Read all as strings to preserve exact formatting
            na_filter=False,  # Don't filter NaN values
            keep_default_na=False,  # Don't convert empty strings to NaN
            skip_blank_lines=False,  # Keep all rows including blank ones
            skipinitialspace=False  # Don't remove leading spaces
        )
    except Exception as e:
        raise Exception(f"Error reading CSV file: {e}")

    document = Document()

    # Set document properties
    core_properties = document.core_properties
    core_properties.title = title
    core_properties.author = author
    if include_date:
        core_properties.created = datetime.now()
        core_properties.modified = datetime.now()

    # Add a title to the document
    document.add_heading(title, level=1)
    
    if include_date:
        date_paragraph = document.add_paragraph()
        date_run = date_paragraph.add_run(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        date_run.font.size = Pt(10)
        date_run.font.color.rgb = RGBColor(0x80, 0x80, 0x80) # Grey color
        date_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT

    document.add_paragraph(f"This document contains data converted from the CSV file: {os.path.basename(csv_file_path)}.")
    document.add_paragraph() # Add an empty line for spacing

    # Add the DataFrame as a table
    if not df.empty:
        table = document.add_table(rows=1, cols=df.shape[1])
        table.style = 'Table Grid' # Apply a basic grid style

        # Set header row
        hdr_cells = table.rows[0].cells
        for i, col_name in enumerate(df.columns):
            hdr_cells[i].text = col_name
            # Style header cells
            for paragraph in hdr_cells[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
                    run.font.size = Pt(10)
                    run.font.color.rgb = RGBColor(0xFF, 0xFF, 0xFF) # White text
            hdr_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            hdr_cells[i].vertical_alignment = WD_ALIGN_VERTICAL.CENTER
            # Set header cell background color (dark blue) - simplified approach
            try:
                # Try to set background color using a simpler method
                from docx.oxml import OxmlElement
                tcPr = hdr_cells[i]._tc.get_or_add_tcPr()
                shading = OxmlElement('w:shd')
                shading.set(qn('w:val'), 'clear')
                shading.set(qn('w:color'), 'auto')
                shading.set(qn('w:fill'), '4472C4')
                tcPr.append(shading)
            except Exception:
                # If styling fails, continue without background color
                pass

        # Add data rows - preserve ALL data including duplicates
        for index, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, cell_value in enumerate(row):
                # Preserve the original data exactly as it appears in CSV
                if pd.isna(cell_value) or cell_value is None:
                    row_cells[i].text = ""
                else:
                    # Keep the original string representation, don't modify it
                    row_cells[i].text = str(cell_value)
                
                # Style data cells
                for paragraph in row_cells[i].paragraphs:
                    for run in paragraph.runs:
                        run.font.size = Pt(9)
                row_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.LEFT
                row_cells[i].vertical_alignment = WD_ALIGN_VERTICAL.CENTER

        # Adjust column widths (optional, can be complex)
        # For simplicity, we'll let Word handle auto-fitting for now
        # You can manually set widths if needed, e.g., table.columns[0].width = Inches(1.5)

    else:
        document.add_paragraph("The CSV file was empty or contained no data rows.")

    try:
        document.save(docx_file_path)
    except Exception as e:
        raise Exception(f"Error saving DOCX file: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert CSV to DOCX using Python.")
    parser.add_argument("csv_file", help="Path to the input CSV file.")
    parser.add_argument("docx_file", help="Path to the output DOCX file.")
    parser.add_argument("--title", default="CSV Data Document", help="Title of the DOCX document.")
    parser.add_argument("--author", default="Generated by Morphy", help="Author of the DOCX document.")
    parser.add_argument("--no-date", action="store_true", help="Do not include creation date in the document properties.")

    args = parser.parse_args()

    try:
        csv_to_docx(args.csv_file, args.docx_file, args.title, args.author, not args.no_date)
        print(f"Successfully converted '{args.csv_file}' to '{args.docx_file}'")
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        exit(1)
