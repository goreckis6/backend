#!/usr/bin/env python3
"""
CSV to E-book Converter using Python
Supports CSV -> EPUB, MOBI, HTML, TXT conversions
"""

import sys
import os
import pandas as pd
import argparse
from pathlib import Path
from jinja2 import Template
from ebooklib import epub
from ebooklib.epub import EpubHtml
import tempfile
import subprocess

def escape_html(text):
    """Escape HTML special characters"""
    if not isinstance(text, str):
        text = str(text)
    return (text.replace('&', '&amp;')
                .replace('<', '&lt;')
                .replace('>', '&gt;')
                .replace('"', '&quot;')
                .replace("'", '&#39;'))

def create_html_template():
    """Create HTML template for e-book content"""
    return Template("""
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>{{ title }}</title>
    <meta name="author" content="{{ author }}" />
    <meta name="generator" content="Morphy Converter" />
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        table { 
            border-collapse: collapse; 
            width: 100%; 
            margin: 20px 0;
            font-size: 14px;
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 12px 8px; 
            text-align: left; 
            vertical-align: top;
        }
        th { 
            background-color: #f2f2f2; 
            font-weight: bold;
            color: #333;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        h1 { 
            color: #333; 
            border-bottom: 3px solid #333;
            padding-bottom: 15px;
            margin-bottom: 30px;
        }
        .metadata {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            border-left: 4px solid #007bff;
        }
        .metadata h2 {
            margin-top: 0;
            color: #007bff;
        }
        .stats {
            display: flex;
            gap: 20px;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        .stat-item {
            background: #e9ecef;
            padding: 10px 15px;
            border-radius: 5px;
            font-weight: bold;
        }
        @media (max-width: 600px) {
            body { padding: 10px; }
            table { font-size: 12px; }
            th, td { padding: 8px 4px; }
        }
    </style>
</head>
<body>
    <div class="metadata">
        <h1>{{ title }}</h1>
        <h2>Document Information</h2>
        <p><strong>Author:</strong> {{ author }}</p>
        <p><strong>Generated by:</strong> Morphy Converter</p>
        <p><strong>Date:</strong> {{ date }}</p>
        <div class="stats">
            <div class="stat-item">Rows: {{ row_count }}</div>
            <div class="stat-item">Columns: {{ col_count }}</div>
            <div class="stat-item">File Size: {{ file_size }}</div>
        </div>
    </div>
    
    <h2>Data Table</h2>
    <table>
        <thead>
            <tr>
                {% for column in columns %}
                <th>{{ column }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
            <tr>
                {% for cell in row %}
                <td>{{ cell }}</td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
""")

def csv_to_html(csv_file, output_file, title="CSV Data", author="Unknown"):
    """Convert CSV to HTML"""
    try:
        # Read CSV
        df = pd.read_csv(csv_file)
        
        # Prepare data
        columns = df.columns.tolist()
        data = df.values.tolist()
        
        # Get file stats
        file_size = f"{os.path.getsize(csv_file) / 1024:.1f} KB"
        
        # Create HTML
        template = create_html_template()
        html_content = template.render(
            title=title,
            author=author,
            date=pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S'),
            columns=columns,
            data=data,
            row_count=len(df),
            col_count=len(columns)
        )
        
        # Write HTML file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        return True, f"Successfully converted to HTML: {len(df)} rows, {len(columns)} columns"
        
    except Exception as e:
        return False, f"Error converting to HTML: {str(e)}"

def csv_to_epub(csv_file, output_file, title="CSV Data", author="Unknown"):
    """Convert CSV to EPUB"""
    try:
        # Read CSV
        df = pd.read_csv(csv_file)
        
        # Create EPUB book
        book = epub.EpubBook()
        book.set_identifier(f"csv-{title.replace(' ', '-').lower()}")
        book.set_title(title)
        book.set_language('en')
        book.add_author(author)
        
        # Create content
        template = create_html_template()
        columns = df.columns.tolist()
        data = df.values.tolist()
        file_size = f"{os.path.getsize(csv_file) / 1024:.1f} KB"
        
        html_content = template.render(
            title=title,
            author=author,
            date=pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S'),
            columns=columns,
            data=data,
            row_count=len(df),
            col_count=len(columns)
        )
        
        # Create chapter
        chapter = epub.EpubHtml(
            title=title,
            file_name='content.xhtml',
            lang='en'
        )
        chapter.content = html_content
        
        # Add chapter to book
        book.add_item(chapter)
        
        # Create table of contents
        book.toc = [chapter]
        
        # Add navigation
        book.add_item(epub.EpubNcx())
        book.add_item(epub.EpubNav())
        
        # Set spine
        book.spine = ['nav', chapter]
        
        # Write EPUB file
        epub.write_epub(output_file, book, {})
        
        return True, f"Successfully converted to EPUB: {len(df)} rows, {len(columns)} columns"
        
    except Exception as e:
        return False, f"Error converting to EPUB: {str(e)}"

def csv_to_mobi(csv_file, output_file, title="CSV Data", author="Unknown"):
    """Convert CSV to MOBI using Calibre"""
    try:
        # First convert to HTML
        html_file = output_file.replace('.mobi', '.html')
        success, message = csv_to_html(csv_file, html_file, title, author)
        
        if not success:
            return False, message
        
        # Convert HTML to MOBI using Calibre
        calibre_cmd = [
            'ebook-convert',
            html_file,
            output_file,
            '--output-profile=kindle',
            '--disable-font-rescaling',
            '--title', title,
            '--authors', author
        ]
        
        result = subprocess.run(calibre_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            # Clean up HTML file
            os.remove(html_file)
            return True, f"Successfully converted to MOBI: {message}"
        else:
            return False, f"Calibre conversion failed: {result.stderr}"
            
    except Exception as e:
        return False, f"Error converting to MOBI: {str(e)}"

def csv_to_txt(csv_file, output_file, title="CSV Data", author="Unknown"):
    """Convert CSV to formatted text"""
    try:
        # Read CSV
        df = pd.read_csv(csv_file)
        
        # Create text content
        text_content = f"Title: {title}\n"
        text_content += f"Author: {author}\n"
        text_content += f"Generated by: Morphy Converter\n"
        text_content += f"Date: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        text_content += f"Rows: {len(df)}, Columns: {len(df.columns)}\n"
        text_content += "=" * 60 + "\n\n"
        
        # Add data
        text_content += df.to_string(index=False)
        
        # Write text file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(text_content)
            
        return True, f"Successfully converted to TXT: {len(df)} rows, {len(df.columns)} columns"
        
    except Exception as e:
        return False, f"Error converting to TXT: {str(e)}"

def main():
    parser = argparse.ArgumentParser(description='Convert CSV to various e-book formats')
    parser.add_argument('input_file', help='Input CSV file')
    parser.add_argument('output_file', help='Output file')
    parser.add_argument('format', choices=['html', 'epub', 'mobi', 'txt'], help='Output format')
    parser.add_argument('--title', default='CSV Data', help='Book title')
    parser.add_argument('--author', default='Unknown', help='Author name')
    
    args = parser.parse_args()
    
    # Check if input file exists
    if not os.path.exists(args.input_file):
        print(f"Error: Input file '{args.input_file}' not found")
        sys.exit(1)
    
    # Convert based on format
    if args.format == 'html':
        success, message = csv_to_html(args.input_file, args.output_file, args.title, args.author)
    elif args.format == 'epub':
        success, message = csv_to_epub(args.input_file, args.output_file, args.title, args.author)
    elif args.format == 'mobi':
        success, message = csv_to_mobi(args.input_file, args.output_file, args.title, args.author)
    elif args.format == 'txt':
        success, message = csv_to_txt(args.input_file, args.output_file, args.title, args.author)
    
    if success:
        print(f"SUCCESS: {message}")
        sys.exit(0)
    else:
        print(f"ERROR: {message}")
        sys.exit(1)

if __name__ == '__main__':
    main()
