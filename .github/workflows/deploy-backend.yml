name: Deploy Backend

on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.BACKEND_VPS_HOST }}
        username: ${{ secrets.BACKEND_VPS_USERNAME }}
        key: ${{ secrets.BACKEND_VPS_SSH_KEY }}
        script: |
          echo "✅ Testing SSH connection..."
          hostname
          whoami
          uptime
          echo "✅ SSH connection successful!"

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.BACKEND_VPS_HOST }}
        username: ${{ secrets.BACKEND_VPS_USERNAME }}
        key: ${{ secrets.BACKEND_VPS_SSH_KEY }}
        script: |
          set -euo pipefail
          
          echo "🚀 Starting deployment..."
          
          # Define paths
          BACKEND_DIR="/opt/backend"
          VENV_DIR="/opt/venv"
          
          # Navigate to backend directory
          cd $BACKEND_DIR
          
          # Pull latest changes
          echo "📥 Pulling latest changes from GitHub..."
          git fetch origin main
          git reset --hard origin/main
          git clean -fd
          
          # Clear Node.js cache and old builds
          echo "🧹 Cleaning cache and old builds..."
          rm -rf node_modules/.cache
          rm -rf dist
          rm -rf .npm
          npm cache clean --force
          
          # Force complete rebuild by removing any compiled files
          echo "🧹 Force removing any compiled JavaScript files..."
          find . -name "*.js" -path "./dist/*" -delete 2>/dev/null || true
          find . -name "*.js.map" -delete 2>/dev/null || true
          
          # Install/Update Node.js dependencies (fresh install)
          echo "📦 Installing Node.js dependencies..."
          npm ci --production=false
          
          # Build application
          echo "🔨 Building application..."
          npm run build
          
          # Verify the build was successful
          echo "🔍 Verifying build output..."
          if [ -f "dist/server.js" ]; then
            echo "✅ dist/server.js created successfully"
            echo "📊 Build size: $(du -h dist/server.js | cut -f1)"
            
            # Verify the new TIFF preview code is in the compiled file
            echo "🔍 Verifying TIFF preview endpoint in compiled code..."
            if grep -q "Checking for tiff_preview.py in the following locations" dist/server.js; then
              echo "✅ New TIFF preview code found in compiled JavaScript"
            else
              echo "❌ ERROR: New TIFF preview code NOT found in compiled JavaScript"
              echo "🔍 Checking for old code..."
              if grep -q "scripts/tiff_preview.py" dist/server.js; then
                echo "❌ ERROR: OLD TIFF preview code still in compiled JavaScript"
                exit 1
              else
                echo "⚠️ WARNING: No TIFF preview code found in compiled JavaScript"
              fi
            fi
          else
            echo "❌ ERROR: dist/server.js not found after build"
            exit 1
          fi
          
          # Ensure scripts directory exists and copy Python scripts
          echo "📁 Setting up Python scripts directory..."
          mkdir -p $BACKEND_DIR/scripts
          rsync -av --delete scripts/ $BACKEND_DIR/scripts/ 2>/dev/null || echo "⚠️ No scripts directory found, creating empty one"
          
          # Ensure viewers directory exists and copy viewer scripts
          echo "📁 Setting up viewers directory..."
          mkdir -p $BACKEND_DIR/viewers
          rsync -av --delete viewers/ $BACKEND_DIR/viewers/ 2>/dev/null || echo "⚠️ No viewers directory found, creating empty one"
          
          # Verify scripts are in place
          echo "🔍 Verifying Python scripts..."
          REQUIRED_SCRIPTS=(
            "csv_to_odp.py"
            "cr2_to_ico.py"
            "cr2_to_webp.py"
            "csv_to_doc.py"
            "csv_to_doc_optimized.py"
            "csv_to_docx.py"
            "csv_to_docx_optimized.py"
            "csv_to_epub.py"
            "csv_to_html.py"
            "csv_to_md.py"
            "csv_to_mobi.py"
            "docx_to_txt.py"
          )
          
          for script in "${REQUIRED_SCRIPTS[@]}"; do
            if [ -f "$BACKEND_DIR/scripts/$script" ]; then
              echo "✅ $script found in $BACKEND_DIR/scripts/"
            else
              echo "❌ ERROR: $script not found in $BACKEND_DIR/scripts/"
            fi
          done
          
          echo "📋 All available files in scripts directory:"
          ls -la $BACKEND_DIR/scripts/ || echo "Scripts directory does not exist"
          
          
          # Check if any required scripts are missing
          MISSING_SCRIPTS=()
          for script in "${REQUIRED_SCRIPTS[@]}"; do
            if [ ! -f "$BACKEND_DIR/scripts/$script" ]; then
              MISSING_SCRIPTS+=("$script")
            fi
          done
          
          if [ ${#MISSING_SCRIPTS[@]} -gt 0 ]; then
            echo "❌ CRITICAL ERROR: Missing required scripts: ${MISSING_SCRIPTS[*]}"
            echo "🔧 Attempting to copy scripts again..."
            rsync -av --delete scripts/ $BACKEND_DIR/scripts/ || echo "⚠️ Failed to copy scripts again"
            exit 1
          fi
          
          # Install system dependencies (always run to ensure latest versions)
          echo "📦 Installing/updating system dependencies..."
          sudo apt install ghostscript -y
          sudo apt install -y \
            python3 python3-pip python3-venv python3-dev \
            libjpeg-dev libpng-dev libtiff-dev libraw-dev \
            build-essential libffi-dev \
            libreoffice libreoffice-writer libreoffice-calc libreoffice-impress \
            calibre \
            pandoc

          # Setup Python environment (only if not exists or needs update)
          if [ ! -d "$VENV_DIR" ] || [ ! -f "$VENV_DIR/bin/python" ]; then
            echo "🐍 Setting up Python virtual environment..."
            
            # Create virtual environment
            sudo mkdir -p $VENV_DIR
            sudo chown -R debian:debian $VENV_DIR
            python3 -m venv $VENV_DIR
            
            # Install Python packages from requirements.txt
            $VENV_DIR/bin/pip install --upgrade pip
            $VENV_DIR/bin/pip install -r requirements.txt
          else
            echo "✅ Python environment already exists, skipping setup..."
          fi
          
          # Verify Python environment
          echo "🔍 Verifying Python environment..."
          $VENV_DIR/bin/python --version
          if $VENV_DIR/bin/python -c "import pandas, lxml, bs4, html5lib, jinja2, ebooklib, odfpy, reportlab, pptx, docx, openpyxl, xlrd, PIL, rawpy, pillow_heif, ghostscript, markdown, chardet, pyarrow; print('✅ Python packages OK')"; then
            echo "✅ Python environment verified successfully"
          else
            echo "⚠️ Warning: Python packages verification failed"
            # Reinstall packages
            $VENV_DIR/bin/pip install --upgrade --force-reinstall -r requirements.txt
          fi
          
          # Clear PM2 logs and dump before restart
          echo "🧹 Clearing PM2 logs and cache..."
          pm2 flush  # Clear all logs
          pm2 cleardump  # Clear PM2 dump file
          
          # Kill PM2 daemon completely to clear all caches
          echo "🔄 Killing PM2 daemon to clear all caches..."
          pm2 kill 2>/dev/null || true
          sleep 2
          
          # Start fresh PM2 process
          echo "▶️ Starting fresh PM2 process..."
          cd $BACKEND_DIR
          pm2 start ecosystem.config.cjs
          pm2 save --force
          
          # Verify PM2 is running the correct file
          echo "🔍 Verifying PM2 is running the correct file..."
          pm2 describe morphy-backend | grep "script path" || true
          
          # Restart Traefik with force-recreate
          echo "🔄 Restarting Traefik..."
          docker compose -f traefik-only.yml down
          docker compose -f traefik-only.yml pull
          docker compose -f traefik-only.yml up -d --force-recreate --remove-orphans
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 5
          
          # Health checks
          echo "🏥 Running health checks..."
          
          # Check if backend is running on localhost
          if curl -f -s http://localhost:3000/health > /dev/null; then
            echo "✅ Backend is running on localhost:3000"
          else
            echo "❌ ERROR: Backend not accessible on localhost:3000"
            pm2 logs morphy-backend --lines 50 --nostream
            exit 1
          fi
          
          # Check if Traefik routing is working
          if curl -f -s https://api.morphyimg.com/health > /dev/null; then
            echo "✅ Traefik routing is working (https://api.morphyimg.com)"
          else
            echo "⚠️ WARNING: Traefik routing may not be working yet (allow 30s for SSL)"
          fi
          
                 # Check Python environment in running app
                 echo "🐍 Testing Python in running application..."
                 if $VENV_DIR/bin/python -c "import rawpy; print('✅ rawpy OK')" 2>/dev/null; then
                   echo "✅ rawpy is working"
                 else
                   echo "⚠️ WARNING: rawpy may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import PIL; print('✅ Pillow OK')" 2>/dev/null; then
                   echo "✅ Pillow is working"
                 else
                   echo "⚠️ WARNING: Pillow may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import odfpy; print('✅ odfpy OK')" 2>/dev/null; then
                   echo "✅ odfpy is working"
                 else
                   echo "⚠️ WARNING: odfpy may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import ebooklib; print('✅ ebooklib OK')" 2>/dev/null; then
                   echo "✅ ebooklib is working"
                 else
                   echo "⚠️ WARNING: ebooklib may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import pandas; print('✅ pandas OK')" 2>/dev/null; then
                   echo "✅ pandas is working"
                 else
                   echo "⚠️ WARNING: pandas may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import lxml; print('✅ lxml OK')" 2>/dev/null; then
                   echo "✅ lxml is working"
                 else
                   echo "⚠️ WARNING: lxml may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import bs4; print('✅ beautifulsoup4 OK')" 2>/dev/null; then
                   echo "✅ beautifulsoup4 is working"
                 else
                   echo "⚠️ WARNING: beautifulsoup4 may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import docx; print('✅ python-docx OK')" 2>/dev/null; then
                   echo "✅ python-docx is working"
                 else
                   echo "⚠️ WARNING: python-docx may not be working"
                 fi

                 if $VENV_DIR/bin/python -c "import openpyxl; print('✅ openpyxl OK')" 2>/dev/null; then
                   echo "✅ openpyxl is working"
                 else
                   echo "⚠️ WARNING: openpyxl may not be working"
                 fi

                 # Verify LibreOffice installation
                 echo "🔍 Verifying LibreOffice installation..."
                 if which soffice >/dev/null 2>&1; then
                   echo "✅ LibreOffice (soffice) is installed"
                   soffice --version 2>/dev/null || echo "⚠️ Could not get LibreOffice version"
                 else
                   echo "❌ ERROR: LibreOffice (soffice) not found"
                 fi

                 # Verify Calibre installation
                 echo "🔍 Verifying Calibre installation..."
                 if which ebook-convert >/dev/null 2>&1; then
                   echo "✅ Calibre (ebook-convert) is installed"
                   ebook-convert --version 2>/dev/null || echo "⚠️ Could not get Calibre version"
                 else
                   echo "❌ ERROR: Calibre (ebook-convert) not found"
                 fi

                 # Verify Pandoc installation
                 echo "🔍 Verifying Pandoc installation..."
                 if which pandoc >/dev/null 2>&1; then
                   echo "✅ Pandoc is installed"
                   pandoc --version 2>/dev/null || echo "⚠️ Could not get Pandoc version"
                 else
                   echo "❌ ERROR: Pandoc not found"
                 fi

                 # Verify Ghostscript installation
                 echo "🔍 Verifying Ghostscript installation..."
                 if which gs >/dev/null 2>&1; then
                   echo "✅ Ghostscript (gs) is installed"
                   gs --version 2>/dev/null || echo "⚠️ Could not get Ghostscript version"
                 else
                   echo "❌ ERROR: Ghostscript (gs) not found"
                 fi
                 
                 # Verify script paths are accessible
                 echo "📁 Verifying script paths..."
                 for script in "${REQUIRED_SCRIPTS[@]}"; do
                   if [ -f "$BACKEND_DIR/scripts/$script" ]; then
                     echo "✅ $BACKEND_DIR/scripts/$script is accessible"
                     # Test if script can be executed (check syntax)
                     if $VENV_DIR/bin/python -m py_compile "$BACKEND_DIR/scripts/$script" 2>/dev/null; then
                       echo "✅ $script syntax is valid"
                     else
                       echo "⚠️ WARNING: $script has syntax errors"
                     fi
                   else
                     echo "❌ ERROR: $BACKEND_DIR/scripts/$script not accessible"
                   fi
                 done
                 
                 
                 # Show status
          echo ""
          echo "📊 Deployment Status:"
          echo "===================="
          pm2 status
          echo ""
          docker compose -f traefik-only.yml ps
          echo ""
          echo "✅ Deployment completed successfully!"
          echo "🌐 API: https://api.morphyimg.com"
          echo "🏥 Health: https://api.morphyimg.com/health"

    - name: Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.BACKEND_VPS_HOST }}
        username: ${{ secrets.BACKEND_VPS_USERNAME }}
        key: ${{ secrets.BACKEND_VPS_SSH_KEY }}
        script: |
          echo "🔍 Final verification after 10 seconds..."
          sleep 10
          
          # Test health endpoint
          if curl -f -s https://api.morphyimg.com/health | grep -q "healthy"; then
            echo "✅ Deployment verified: API is healthy"
          else
            echo "Testing health endpoint..."
            HEALTH_RESPONSE=$(curl -f -s https://api.morphyimg.com/health 2>&1)
            CURL_EXIT_CODE=$?
            
            if [ $CURL_EXIT_CODE -eq 0 ]; then
              echo "✅ Deployment verified: API is responding"
              echo "📋 Health response: $HEALTH_RESPONSE"
            else
              echo "❌ Deployment verification failed"
              exit 1
            fi
          fi

    - name: Show Logs on Failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.BACKEND_VPS_HOST }}
        username: ${{ secrets.BACKEND_VPS_USERNAME }}
        key: ${{ secrets.BACKEND_VPS_SSH_KEY }}
        script: |
          echo "❌ Deployment failed! Checking logs..."
          echo ""
          echo "📋 PM2 Logs:"
          pm2 logs morphy-backend --lines 100 --nostream
          echo ""
          echo "📊 PM2 Status:"
          pm2 status
          echo ""
          echo "🐳 Docker Status:"
          docker compose -f traefik-only.yml ps
          echo ""
          echo "🔍 Port 3000 Status:"
          netstat -tlnp | grep :3000 || echo "Port 3000 not listening"