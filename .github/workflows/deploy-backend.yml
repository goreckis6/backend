name: Deploy Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BACKEND_VPS_HOST }}
          username: ${{ secrets.BACKEND_VPS_USERNAME }}
          key: ${{ secrets.BACKEND_VPS_SSH_KEY }}
          script: |
            echo "Testing SSH connection..."
            hostname
            whoami
            uptime
            echo "SSH connection successful!"

      - name: Setup VPS Environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BACKEND_VPS_HOST }}
          username: ${{ secrets.BACKEND_VPS_USERNAME }}
          key: ${{ secrets.BACKEND_VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            
            echo "Setting up VPS environment..."
            
            # Update system packages
            sudo apt update -y
            
            # Install Node.js 20 if not installed
            if ! command -v node &> /dev/null || ! node --version | grep -q "v20"; then
              echo "Installing Node.js 20..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Install PM2 globally if not installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            fi
            
            # Install Git if not installed
            if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo apt install -y git
            fi
            
            # Create application directory
            mkdir -p /home/debian/morphy-backend
            cd /home/debian/morphy-backend
            
            # Clone repository if it doesn't exist, otherwise pull
            if [ ! -d ".git" ]; then
              echo "Cloning repository..."
              git clone https://github.com/goreckis6/backend.git .
            else
              echo "Pulling latest changes..."
              git pull origin main
            fi
            
            echo "VPS environment setup complete!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/morphy-backend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/morphy-backend:latest

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BACKEND_VPS_HOST }}
          username: ${{ secrets.BACKEND_VPS_USERNAME }}
          key: ${{ secrets.BACKEND_VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            
            echo "Deploying backend with Docker and Traefik..."
            cd /opt/backend
            
            # Create directory if it doesn't exist
            sudo mkdir -p /opt/backend
            sudo chown -R debian:debian /opt/backend
            cd /opt/backend
            
            # Clone repository if it doesn't exist, otherwise pull
            if [ ! -d ".git" ]; then
              echo "Cloning repository..."
              git clone https://github.com/goreckis6/backend.git .
            else
              echo "Pulling latest changes..."
              git pull origin main
            fi
            
            # Pull latest Docker image
            docker compose pull
            
            # Start services
            docker compose up -d --remove-orphans
            
            echo "Backend deployed successfully!"
            docker compose ps
